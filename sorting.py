# -*- coding: utf-8 -*-
"""sorting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gu25Nh6Y93vHqWvqFgUQpRiEbQ0LU0lw
"""

def merge(a1,a2,a):

  i= 0
  j=0
  k = 0
  while i < len(a1) and j < len(a2):
    if a1[i] < a2[j]:
      a[k] = a1[i]
      k = k +1
      i = i +1
    else:
      a[k] = a2[j]
      k = k +1
      j = j + 1
  while i < len(a1):
    a[k] = a1[i]
    k = k +1
    i = i + 1
  while j < len(a2):
    a[k] = a2[j]
    k = k +1
    j = j +1

def merge_Sort(a):

  if len(a) == 0 or len(a) == 1:
    return

  mid = len(a)//2

  a1 = a[0:mid]
  a2 = a[mid:]

  merge_Sort(a1)
  merge_Sort(a2)

  merge(a1,a2,a)

a = [9,8,7,6,5,4,2,1]
merge_Sort(a)
a

def partition(a,si,ei):

  pivot = a[si]
  i = si
  j = ei
  c = 0

  while i <= j:
    if a[i] < pivot:
      c = c + 1
    i = i + 1



  a[si],a[si+c] = a[si+c],a[si]
  pivot_index = si+c

  while si < pivot_index and pivot_index < ei:
    if a[si] < a[pivot_index]:
      si = si + 1
    elif a[pivot_index] <= a[ei]:
      ei = ei - 1
    else:
      a[si],a[ei] = a[ei], a[si]

  return pivot_index

def quick_sort(a,si,ei):

  if si >= ei:
    return

  pivot_index = partition(a,si,ei)
  quick_sort(a,si,pivot_index-1)
  quick_sort(a,pivot_index+1,ei)

a = [4,3,2,1,9,7,4,5,100,88,0]
index = partition(a,0,len(a)-1)
print(a)
print(index)
quick_sort(a,0,len(a)-1)
a

